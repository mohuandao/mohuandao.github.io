<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>进击的程序猿，mohuandao&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/48e5f9b776da8f27a26c5c552593a8be</icon>
  <subtitle>吾生也有涯，而知也无涯 。以有涯随无涯，殆已</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-26T03:27:30.150Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mohuandao</name>
    <email>wdong1205#gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优化的一些想法</title>
    <link href="http://yoursite.com/2019/07/26/%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/26/优化的一些想法/</id>
    <published>2019-07-26T03:22:19.000Z</published>
    <updated>2019-07-26T03:27:30.150Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了之前上个项目里的核心业务代码,我没看懂,里面循环里套循环,至少看到3到4层.这样的代码也只有写这</p><p>个的人能维护,首先我能想到的就是:</p><ul><li><p>将这个业务拆分成到各个service层,这样能清晰看到服务的调用.</p></li><li><p>减少在循环里面进行数据库的操作,能否放在循环的外面,减少io交互.,尽可能可能操作Java代码来实现功能.</p><p>(比如之前遇到的查出树形结构的菜单,一次查出全部菜单,然后递归处理成树形结构.)</p></li><li><p>有的数据只能等其他数据出来再做处理,能否用多线程改成异步的.</p></li><li><p>对于数据量很大的循环采用多线程并行处理,(单核纯计算不要开多线程。有 io 的话性能瓶颈可能不在 cpu 上,可开启多线程).</p></li></ul>  <a id="more"></a><p>  这里面应该是对每个线程里的循环进行分组.</p><p>  下面是我简单的尝试的下:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">singleThread</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>; <span class="comment">//循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">234</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"do something"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"循环次数 "</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果如下:</span></span><br><span class="line"><span class="comment">do something</span></span><br><span class="line"><span class="comment">循环次数 1000</span></span><br><span class="line"><span class="comment">循环时间 10335ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moreThread</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);<span class="comment">//线程池大小5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        group();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//停止</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让主线程等待</span></span><br><span class="line">    <span class="comment">//awaitTermination返回true,线程池中线程执行完,为false,超时</span></span><br><span class="line">        <span class="keyword">while</span> (!executorService.awaitTermination(<span class="number">10</span>,TimeUnit.SECONDS)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环两百次的任务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">group</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Date start = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>; <span class="comment">//循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">200</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">23</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"do something"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"循环次数 "</span>+j);</span><br><span class="line">        Date end = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(end.getTime()-start.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果如下</span></span><br><span class="line"><span class="comment">do something</span></span><br><span class="line"><span class="comment">do something</span></span><br><span class="line"><span class="comment">do something</span></span><br><span class="line"><span class="comment">do something</span></span><br><span class="line"><span class="comment">do something</span></span><br><span class="line"><span class="comment">循环次数 200</span></span><br><span class="line"><span class="comment">2069</span></span><br><span class="line"><span class="comment">循环次数 200</span></span><br><span class="line"><span class="comment">2077</span></span><br><span class="line"><span class="comment">循环次数 200</span></span><br><span class="line"><span class="comment">2111</span></span><br><span class="line"><span class="comment">循环次数 200</span></span><br><span class="line"><span class="comment">2121</span></span><br><span class="line"><span class="comment">循环次数 200</span></span><br><span class="line"><span class="comment">2131</span></span><br><span class="line"><span class="comment">循环时间 2141ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>  可以看到时间是原来的1/5左右.</p><p>并发应该有很多方案,不一定要用到多线程.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了之前上个项目里的核心业务代码,我没看懂,里面循环里套循环,至少看到3到4层.这样的代码也只有写这&lt;/p&gt;
&lt;p&gt;个的人能维护,首先我能想到的就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将这个业务拆分成到各个service层,这样能清晰看到服务的调用.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减少在循环里面进行数据库的操作,能否放在循环的外面,减少io交互.,尽可能可能操作Java代码来实现功能.&lt;/p&gt;
&lt;p&gt;(比如之前遇到的查出树形结构的菜单,一次查出全部菜单,然后递归处理成树形结构.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有的数据只能等其他数据出来再做处理,能否用多线程改成异步的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于数据量很大的循环采用多线程并行处理,(单核纯计算不要开多线程。有 io 的话性能瓶颈可能不在 cpu 上,可开启多线程).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="想法" scheme="http://yoursite.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>DualPivotQuicksort源码</title>
    <link href="http://yoursite.com/2019/07/17/DualPivotQuicksort%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2019/07/17/DualPivotQuicksort源码/</id>
    <published>2019-07-17T06:38:38.000Z</published>
    <updated>2019-07-17T07:57:20.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java里快排的源码"><a href="#java里快排的源码" class="headerlink" title="java里快排的源码:"></a>java里快排的源码:</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The maximum number of runs in merge sort.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RUN_COUNT = <span class="number">67</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The maximum length of run in merge sort.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RUN_LENGTH = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * If the length of an array to be sorted is less than this</span></span><br><span class="line"><span class="comment">    * constant, Quicksort is used in preference to merge sort.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QUICKSORT_THRESHOLD = <span class="number">286</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * If the length of an array to be sorted is less than this</span></span><br><span class="line"><span class="comment">    * constant, insertion sort is used in preference to Quicksort.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSERTION_SORT_THRESHOLD = <span class="number">47</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * If the length of a byte array to be sorted is greater than this</span></span><br><span class="line"><span class="comment">    * constant, counting sort is used in preference to insertion sort.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNTING_SORT_THRESHOLD_FOR_BYTE = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * If the length of a short or char array to be sorted is greater</span></span><br><span class="line"><span class="comment">    * than this constant, counting sort is used in preference to Quicksort.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR = <span class="number">3200</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">int</span>[] work, <span class="keyword">int</span> workBase, <span class="keyword">int</span> workLen)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Use Quicksort on small arrays</span></span><br><span class="line">       <span class="keyword">if</span> (right - left &lt; QUICKSORT_THRESHOLD) &#123;</span><br><span class="line">           sort(a, left, right, <span class="keyword">true</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Index run[i] is the start of i-th run</span></span><br><span class="line"><span class="comment">        * (ascending or descending sequence).</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">int</span>[] run = <span class="keyword">new</span> <span class="keyword">int</span>[MAX_RUN_COUNT + <span class="number">1</span>];</span><br><span class="line">       <span class="keyword">int</span> count = <span class="number">0</span>; run[<span class="number">0</span>] = left;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Check if the array is nearly sorted</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt; right; run[count] = k) &#123;</span><br><span class="line">           <span class="keyword">if</span> (a[k] &lt; a[k + <span class="number">1</span>]) &#123; <span class="comment">// ascending</span></span><br><span class="line">               <span class="keyword">while</span> (++k &lt;= right &amp;&amp; a[k - <span class="number">1</span>] &lt;= a[k]);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[k] &gt; a[k + <span class="number">1</span>]) &#123; <span class="comment">// descending</span></span><br><span class="line">               <span class="keyword">while</span> (++k &lt;= right &amp;&amp; a[k - <span class="number">1</span>] &gt;= a[k]);</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> lo = run[count] - <span class="number">1</span>, hi = k; ++lo &lt; --hi; ) &#123;</span><br><span class="line">                   <span class="keyword">int</span> t = a[lo]; a[lo] = a[hi]; a[hi] = t;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// equal</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> m = MAX_RUN_LENGTH; ++k &lt;= right &amp;&amp; a[k - <span class="number">1</span>] == a[k]; ) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (--m == <span class="number">0</span>) &#123;</span><br><span class="line">                       sort(a, left, right, <span class="keyword">true</span>);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * The array is not highly structured,</span></span><br><span class="line"><span class="comment">            * use Quicksort instead of merge sort.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">if</span> (++count == MAX_RUN_COUNT) &#123;</span><br><span class="line">               sort(a, left, right, <span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Check special cases</span></span><br><span class="line">       <span class="comment">// Implementation note: variable "right" is increased by 1.</span></span><br><span class="line">       <span class="keyword">if</span> (run[count] == right++) &#123; <span class="comment">// The last run contains one element</span></span><br><span class="line">           run[++count] = right;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) &#123; <span class="comment">// The array is already sorted</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Determine alternation base for merge</span></span><br><span class="line">       <span class="keyword">byte</span> odd = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; (n &lt;&lt;= <span class="number">1</span>) &lt; count; odd ^= <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Use or create temporary array b for merging</span></span><br><span class="line">       <span class="keyword">int</span>[] b;                 <span class="comment">// temp array; alternates with a</span></span><br><span class="line">       <span class="keyword">int</span> ao, bo;              <span class="comment">// array offsets from 'left'</span></span><br><span class="line">       <span class="keyword">int</span> blen = right - left; <span class="comment">// space needed for b</span></span><br><span class="line">       <span class="keyword">if</span> (work == <span class="keyword">null</span> || workLen &lt; blen || workBase + blen &gt; work.length) &#123;</span><br><span class="line">           work = <span class="keyword">new</span> <span class="keyword">int</span>[blen];</span><br><span class="line">           workBase = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (odd == <span class="number">0</span>) &#123;</span><br><span class="line">           System.arraycopy(a, left, work, workBase, blen);</span><br><span class="line">           b = a;</span><br><span class="line">           bo = <span class="number">0</span>;</span><br><span class="line">           a = work;</span><br><span class="line">           ao = workBase - left;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           b = work;</span><br><span class="line">           ao = <span class="number">0</span>;</span><br><span class="line">           bo = workBase - left;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Merging</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> last; count &gt; <span class="number">1</span>; count = last) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> k = (last = <span class="number">0</span>) + <span class="number">2</span>; k &lt;= count; k += <span class="number">2</span>) &#123;</span><br><span class="line">               <span class="keyword">int</span> hi = run[k], mi = run[k - <span class="number">1</span>];</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = run[k - <span class="number">2</span>], p = i, q = mi; i &lt; hi; ++i) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (q &gt;= hi || p &lt; mi &amp;&amp; a[p + ao] &lt;= a[q + ao]) &#123;</span><br><span class="line">                       b[i + bo] = a[p++ + ao];</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       b[i + bo] = a[q++ + ao];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               run[++last] = hi;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = right, lo = run[count - <span class="number">1</span>]; --i &gt;= lo;</span><br><span class="line">                   b[i + bo] = a[i + ao]</span><br><span class="line">               );</span><br><span class="line">               run[++last] = right;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">int</span>[] t = a; a = b; b = t;</span><br><span class="line">           <span class="keyword">int</span> o = ao; ao = bo; bo = o;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sorts the specified range of the array by Dual-Pivot Quicksort.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> a the array to be sorted</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> left the index of the first element, inclusive, to be sorted</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> right the index of the last element, inclusive, to be sorted</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> leftmost indicates if this part is the leftmost in the range</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">boolean</span> leftmost)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> length = right - left + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Use insertion sort on tiny arrays</span></span><br><span class="line">       <span class="keyword">if</span> (length &lt; INSERTION_SORT_THRESHOLD) &#123;</span><br><span class="line">           <span class="keyword">if</span> (leftmost) &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Traditional (without sentinel) insertion sort,</span></span><br><span class="line"><span class="comment">                * optimized for server VM, is used in case of</span></span><br><span class="line"><span class="comment">                * the leftmost part.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = left, j = i; i &lt; right; j = ++i) &#123;</span><br><span class="line">                   <span class="keyword">int</span> ai = a[i + <span class="number">1</span>];</span><br><span class="line">                   <span class="keyword">while</span> (ai &lt; a[j]) &#123;</span><br><span class="line">                       a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">                       <span class="keyword">if</span> (j-- == left) &#123;</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   a[j + <span class="number">1</span>] = ai;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Skip the longest ascending sequence.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">do</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">while</span> (a[++left] &gt;= a[left - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Every element from adjoining part plays the role</span></span><br><span class="line"><span class="comment">                * of sentinel, therefore this allows us to avoid the</span></span><br><span class="line"><span class="comment">                * left range check on each iteration. Moreover, we use</span></span><br><span class="line"><span class="comment">                * the more optimized algorithm, so called pair insertion</span></span><br><span class="line"><span class="comment">                * sort, which is faster (in the context of Quicksort)</span></span><br><span class="line"><span class="comment">                * than traditional implementation of insertion sort.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> k = left; ++left &lt;= right; k = ++left) &#123;</span><br><span class="line">                   <span class="keyword">int</span> a1 = a[k], a2 = a[left];</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (a1 &lt; a2) &#123;</span><br><span class="line">                       a2 = a1; a1 = a[left];</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">while</span> (a1 &lt; a[--k]) &#123;</span><br><span class="line">                       a[k + <span class="number">2</span>] = a[k];</span><br><span class="line">                   &#125;</span><br><span class="line">                   a[++k + <span class="number">1</span>] = a1;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">while</span> (a2 &lt; a[--k]) &#123;</span><br><span class="line">                       a[k + <span class="number">1</span>] = a[k];</span><br><span class="line">                   &#125;</span><br><span class="line">                   a[k + <span class="number">1</span>] = a2;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">int</span> last = a[right];</span><br><span class="line"></span><br><span class="line">               <span class="keyword">while</span> (last &lt; a[--right]) &#123;</span><br><span class="line">                   a[right + <span class="number">1</span>] = a[right];</span><br><span class="line">               &#125;</span><br><span class="line">               a[right + <span class="number">1</span>] = last;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Inexpensive approximation of length / 7</span></span><br><span class="line">       <span class="keyword">int</span> seventh = (length &gt;&gt; <span class="number">3</span>) + (length &gt;&gt; <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Sort five evenly spaced elements around (and including) the</span></span><br><span class="line"><span class="comment">        * center element in the range. These elements will be used for</span></span><br><span class="line"><span class="comment">        * pivot selection as described below. The choice for spacing</span></span><br><span class="line"><span class="comment">        * these elements was empirically determined to work well on</span></span><br><span class="line"><span class="comment">        * a wide variety of inputs.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">int</span> e3 = (left + right) &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// The midpoint</span></span><br><span class="line">       <span class="keyword">int</span> e2 = e3 - seventh;</span><br><span class="line">       <span class="keyword">int</span> e1 = e2 - seventh;</span><br><span class="line">       <span class="keyword">int</span> e4 = e3 + seventh;</span><br><span class="line">       <span class="keyword">int</span> e5 = e4 + seventh;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Sort these elements using insertion sort</span></span><br><span class="line">       <span class="keyword">if</span> (a[e2] &lt; a[e1]) &#123; <span class="keyword">int</span> t = a[e2]; a[e2] = a[e1]; a[e1] = t; &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (a[e3] &lt; a[e2]) &#123; <span class="keyword">int</span> t = a[e3]; a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">           <span class="keyword">if</span> (t &lt; a[e1]) &#123; a[e2] = a[e1]; a[e1] = t; &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (a[e4] &lt; a[e3]) &#123; <span class="keyword">int</span> t = a[e4]; a[e4] = a[e3]; a[e3] = t;</span><br><span class="line">           <span class="keyword">if</span> (t &lt; a[e2]) &#123; a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">               <span class="keyword">if</span> (t &lt; a[e1]) &#123; a[e2] = a[e1]; a[e1] = t; &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (a[e5] &lt; a[e4]) &#123; <span class="keyword">int</span> t = a[e5]; a[e5] = a[e4]; a[e4] = t;</span><br><span class="line">           <span class="keyword">if</span> (t &lt; a[e3]) &#123; a[e4] = a[e3]; a[e3] = t;</span><br><span class="line">               <span class="keyword">if</span> (t &lt; a[e2]) &#123; a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">                   <span class="keyword">if</span> (t &lt; a[e1]) &#123; a[e2] = a[e1]; a[e1] = t; &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Pointers</span></span><br><span class="line">       <span class="keyword">int</span> less  = left;  <span class="comment">// The index of the first element of center part</span></span><br><span class="line">       <span class="keyword">int</span> great = right; <span class="comment">// The index before the first element of right part</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (a[e1] != a[e2] &amp;&amp; a[e2] != a[e3] &amp;&amp; a[e3] != a[e4] &amp;&amp; a[e4] != a[e5]) &#123;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Use the second and fourth of the five sorted elements as pivots.</span></span><br><span class="line"><span class="comment">            * These values are inexpensive approximations of the first and</span></span><br><span class="line"><span class="comment">            * second terciles of the array. Note that pivot1 &lt;= pivot2.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">int</span> pivot1 = a[e2];</span><br><span class="line">           <span class="keyword">int</span> pivot2 = a[e4];</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * The first and the last elements to be sorted are moved to the</span></span><br><span class="line"><span class="comment">            * locations formerly occupied by the pivots. When partitioning</span></span><br><span class="line"><span class="comment">            * is complete, the pivots are swapped back into their final</span></span><br><span class="line"><span class="comment">            * positions, and excluded from subsequent sorting.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           a[e2] = a[left];</span><br><span class="line">           a[e4] = a[right];</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Skip elements, which are less or greater than pivot values.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">while</span> (a[++less] &lt; pivot1);</span><br><span class="line">           <span class="keyword">while</span> (a[--great] &gt; pivot2);</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Partitioning:</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *   left part           center part                   right part</span></span><br><span class="line"><span class="comment">            * +--------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">            * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |</span></span><br><span class="line"><span class="comment">            * +--------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">            *               ^                          ^       ^</span></span><br><span class="line"><span class="comment">            *               |                          |       |</span></span><br><span class="line"><span class="comment">            *              less                        k     great</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * Invariants:</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *              all in (left, less)   &lt; pivot1</span></span><br><span class="line"><span class="comment">            *    pivot1 &lt;= all in [less, k)     &lt;= pivot2</span></span><br><span class="line"><span class="comment">            *              all in (great, right) &gt; pivot2</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * Pointer k is the first index of ?-part.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           outer:</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> k = less - <span class="number">1</span>; ++k &lt;= great; ) &#123;</span><br><span class="line">               <span class="keyword">int</span> ak = a[k];</span><br><span class="line">               <span class="keyword">if</span> (ak &lt; pivot1) &#123; <span class="comment">// Move a[k] to left part</span></span><br><span class="line">                   a[k] = a[less];</span><br><span class="line">                   <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    * Here and below we use "a[i] = b; i++;" instead</span></span><br><span class="line"><span class="comment">                    * of "a[i++] = b;" due to performance issue.</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                   a[less] = ak;</span><br><span class="line">                   ++less;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ak &gt; pivot2) &#123; <span class="comment">// Move a[k] to right part</span></span><br><span class="line">                   <span class="keyword">while</span> (a[great] &gt; pivot2) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (great-- == k) &#123;</span><br><span class="line">                           <span class="keyword">break</span> outer;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (a[great] &lt; pivot1) &#123; <span class="comment">// a[great] &lt;= pivot2</span></span><br><span class="line">                       a[k] = a[less];</span><br><span class="line">                       a[less] = a[great];</span><br><span class="line">                       ++less;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123; <span class="comment">// pivot1 &lt;= a[great] &lt;= pivot2</span></span><br><span class="line">                       a[k] = a[great];</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    * Here and below we use "a[i] = b; i--;" instead</span></span><br><span class="line"><span class="comment">                    * of "a[i--] = b;" due to performance issue.</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                   a[great] = ak;</span><br><span class="line">                   --great;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Swap pivots into their final positions</span></span><br><span class="line">           a[left]  = a[less  - <span class="number">1</span>]; a[less  - <span class="number">1</span>] = pivot1;</span><br><span class="line">           a[right] = a[great + <span class="number">1</span>]; a[great + <span class="number">1</span>] = pivot2;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Sort left and right parts recursively, excluding known pivots</span></span><br><span class="line">           sort(a, left, less - <span class="number">2</span>, leftmost);</span><br><span class="line">           sort(a, great + <span class="number">2</span>, right, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * If center part is too large (comprises &gt; 4/7 of the array),</span></span><br><span class="line"><span class="comment">            * swap internal pivot values to ends.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">if</span> (less &lt; e1 &amp;&amp; e5 &lt; great) &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Skip elements, which are equal to pivot values.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">while</span> (a[less] == pivot1) &#123;</span><br><span class="line">                   ++less;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">while</span> (a[great] == pivot2) &#123;</span><br><span class="line">                   --great;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Partitioning:</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                *   left part         center part                  right part</span></span><br><span class="line"><span class="comment">                * +----------------------------------------------------------+</span></span><br><span class="line"><span class="comment">                * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |</span></span><br><span class="line"><span class="comment">                * +----------------------------------------------------------+</span></span><br><span class="line"><span class="comment">                *              ^                        ^       ^</span></span><br><span class="line"><span class="comment">                *              |                        |       |</span></span><br><span class="line"><span class="comment">                *             less                      k     great</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                * Invariants:</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                *              all in (*,  less) == pivot1</span></span><br><span class="line"><span class="comment">                *     pivot1 &lt; all in [less,  k)  &lt; pivot2</span></span><br><span class="line"><span class="comment">                *              all in (great, *) == pivot2</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                * Pointer k is the first index of ?-part.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               outer:</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> k = less - <span class="number">1</span>; ++k &lt;= great; ) &#123;</span><br><span class="line">                   <span class="keyword">int</span> ak = a[k];</span><br><span class="line">                   <span class="keyword">if</span> (ak == pivot1) &#123; <span class="comment">// Move a[k] to left part</span></span><br><span class="line">                       a[k] = a[less];</span><br><span class="line">                       a[less] = ak;</span><br><span class="line">                       ++less;</span><br><span class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ak == pivot2) &#123; <span class="comment">// Move a[k] to right part</span></span><br><span class="line">                       <span class="keyword">while</span> (a[great] == pivot2) &#123;</span><br><span class="line">                           <span class="keyword">if</span> (great-- == k) &#123;</span><br><span class="line">                               <span class="keyword">break</span> outer;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (a[great] == pivot1) &#123; <span class="comment">// a[great] &lt; pivot2</span></span><br><span class="line">                           a[k] = a[less];</span><br><span class="line">                           <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            * Even though a[great] equals to pivot1, the</span></span><br><span class="line"><span class="comment">                            * assignment a[less] = pivot1 may be incorrect,</span></span><br><span class="line"><span class="comment">                            * if a[great] and pivot1 are floating-point zeros</span></span><br><span class="line"><span class="comment">                            * of different signs. Therefore in float and</span></span><br><span class="line"><span class="comment">                            * double sorting methods we have to use more</span></span><br><span class="line"><span class="comment">                            * accurate assignment a[less] = a[great].</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line">                           a[less] = pivot1;</span><br><span class="line">                           ++less;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123; <span class="comment">// pivot1 &lt; a[great] &lt; pivot2</span></span><br><span class="line">                           a[k] = a[great];</span><br><span class="line">                       &#125;</span><br><span class="line">                       a[great] = ak;</span><br><span class="line">                       --great;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Sort center part recursively</span></span><br><span class="line">           sort(a, less, great, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">// Partitioning with one pivot</span></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Use the third of the five sorted elements as pivot.</span></span><br><span class="line"><span class="comment">            * This value is inexpensive approximation of the median.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">int</span> pivot = a[e3];</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Partitioning degenerates to the traditional 3-way</span></span><br><span class="line"><span class="comment">            * (or "Dutch National Flag") schema:</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *   left part    center part              right part</span></span><br><span class="line"><span class="comment">            * +-------------------------------------------------+</span></span><br><span class="line"><span class="comment">            * |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |</span></span><br><span class="line"><span class="comment">            * +-------------------------------------------------+</span></span><br><span class="line"><span class="comment">            *              ^              ^        ^</span></span><br><span class="line"><span class="comment">            *              |              |        |</span></span><br><span class="line"><span class="comment">            *             less            k      great</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * Invariants:</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *   all in (left, less)   &lt; pivot</span></span><br><span class="line"><span class="comment">            *   all in [less, k)     == pivot</span></span><br><span class="line"><span class="comment">            *   all in (great, right) &gt; pivot</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * Pointer k is the first index of ?-part.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> k = less; k &lt;= great; ++k) &#123;</span><br><span class="line">               <span class="keyword">if</span> (a[k] == pivot) &#123;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">int</span> ak = a[k];</span><br><span class="line">               <span class="keyword">if</span> (ak &lt; pivot) &#123; <span class="comment">// Move a[k] to left part</span></span><br><span class="line">                   a[k] = a[less];</span><br><span class="line">                   a[less] = ak;</span><br><span class="line">                   ++less;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123; <span class="comment">// a[k] &gt; pivot - Move a[k] to right part</span></span><br><span class="line">                   <span class="keyword">while</span> (a[great] &gt; pivot) &#123;</span><br><span class="line">                       --great;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (a[great] &lt; pivot) &#123; <span class="comment">// a[great] &lt;= pivot</span></span><br><span class="line">                       a[k] = a[less];</span><br><span class="line">                       a[less] = a[great];</span><br><span class="line">                       ++less;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123; <span class="comment">// a[great] == pivot</span></span><br><span class="line">                       <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        * Even though a[great] equals to pivot, the</span></span><br><span class="line"><span class="comment">                        * assignment a[k] = pivot may be incorrect,</span></span><br><span class="line"><span class="comment">                        * if a[great] and pivot are floating-point</span></span><br><span class="line"><span class="comment">                        * zeros of different signs. Therefore in float</span></span><br><span class="line"><span class="comment">                        * and double sorting methods we have to use</span></span><br><span class="line"><span class="comment">                        * more accurate assignment a[k] = a[great].</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                       a[k] = pivot;</span><br><span class="line">                   &#125;</span><br><span class="line">                   a[great] = ak;</span><br><span class="line">                   --great;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Sort left and right parts recursively.</span></span><br><span class="line"><span class="comment">            * All elements from center part are equal</span></span><br><span class="line"><span class="comment">            * and, therefore, already sorted.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           sort(a, left, less - <span class="number">1</span>, leftmost);</span><br><span class="line">           sort(a, great + <span class="number">1</span>, right, <span class="keyword">false</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;java里快排的源码&quot;&gt;&lt;a href=&quot;#java里快排的源码&quot; class=&quot;headerlink&quot; title=&quot;java里快排的源码:&quot;&gt;&lt;/a&gt;java里快排的源码:&lt;/h3&gt;
    
    </summary>
    
      <category term="算法部分" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%83%A8%E5%88%86/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://yoursite.com/2019/07/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/12/排序算法/</id>
    <published>2019-07-12T07:18:21.000Z</published>
    <updated>2019-07-17T09:52:11.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序-一"><a href="#排序-一" class="headerlink" title="排序(一)"></a>排序(一)</h1><h3 id="冒泡排序和选择排序"><a href="#冒泡排序和选择排序" class="headerlink" title="冒泡排序和选择排序"></a>冒泡排序和选择排序</h3><p>最开始接触的排序就是冒泡排序和选择排序,这两种排序都是经过一轮把最小的放在前面.这两种排序的时间复杂度均为O(n^2)</p><p>不同的是:</p><p>​    冒泡排序是在相邻的元素之间进行,将最小的移到了最前面.</p><p>​    选择排序是前面的一个数和后面的整体比较,将最小的放前面.</p><p>冒泡:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;<span class="comment">//外部循环次数</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.length-<span class="number">1</span>;j&gt;<span class="number">0</span> ;j--)&#123; <span class="comment">//从后面开始比较</span></span><br><span class="line">               <span class="keyword">if</span> (arr[j] &lt; arr[j-<span class="number">1</span>])&#123;</span><br><span class="line">                   <span class="keyword">int</span> temp = arr[j-<span class="number">1</span>];<span class="comment">//交换</span></span><br><span class="line">                   arr[j-<span class="number">1</span>] = arr[j];</span><br><span class="line">                   arr[j] = temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>选择:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> [] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length; i++)&#123;<span class="comment">//外部循环</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>;j &lt;arr.length ;j++)&#123;<span class="comment">//第一个和剩下的比较</span></span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;<span class="comment">//交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[i];</span><br><span class="line">                    arr[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序不是通过交换位置来排序的,是通过插入来的.就像玩扑克牌时,摸一张牌放到手中合适的位置.</p><p>前面的元素要排好序,</p><p>插入的时候插入值从后面开始比较,如果插入值大,比较值后移.直到插入值小于等于比较值.</p><p>简单插入排序的时间复杂度也是O(n^2)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; arr.length; i++)&#123; <span class="comment">//先假设第一个数正确</span></span><br><span class="line">            <span class="keyword">int</span> j = i;<span class="comment">//插入点,后移了确定</span></span><br><span class="line">            <span class="keyword">int</span> target = arr[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; target &lt; arr[j -<span class="number">1</span>])&#123;<span class="comment">//和前面排好的比较,前面一定是排好序的.</span></span><br><span class="line">                arr[j] = arr[j -<span class="number">1</span>];<span class="comment">//后移</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//插入</span></span><br><span class="line">            arr[j] = target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序可能是实际中使用中表现最好的,思路是比较和交换小数和大数.</p><p>快速排序是不稳定的，其时间平均时间复杂度是O(nlgn)。在最坏状况下则需要O(n^2)次比较，但这种状况并不常见</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right || arr == <span class="keyword">null</span> || arr.length &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = right;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[(left+right)/<span class="number">2</span>]; <span class="comment">//基准</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt; pivot)&#123;<span class="comment">//从左边开始找大于 pivot值的索引</span></span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (arr[j] &gt; pivot) &#123; <span class="comment">//从右边开始找小于 pivot值的索引</span></span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123; <span class="comment">//交换</span></span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">                ++i;           <span class="comment">//外层循环继续</span></span><br><span class="line">                --j;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == j)&#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        quickSort(arr,left,j);</span><br><span class="line">        quickSort(arr,i,right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述代码运行会报StackOverflowError的错误.看看具体的思想.</p><p>因为用到递归，方法进栈出栈，当数据量达到一定数目的时候会出现堆栈溢出异常</p><p>对上述代码进行改进,要在递归的时候进行分区,上述代码完全交由栈去处理是不行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivotKey = arr[left];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; arr[right] &gt;= pivotKey)</span><br><span class="line">            right --;</span><br><span class="line">            arr[left] = arr[right]; <span class="comment">//把小的移动到左边</span></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; arr[left] &lt;= pivotKey)</span><br><span class="line">            left ++;</span><br><span class="line">            arr[right] = arr[left]; <span class="comment">//把大的移动到右边</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = pivotKey; <span class="comment">//最后把pivot赋值到中间</span></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> pivotPos = partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, pivotPos-<span class="number">1</span>);</span><br><span class="line">        quickSort(arr, pivotPos+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="快排的改进"><a href="#快排的改进" class="headerlink" title="快排的改进"></a>快排的改进</h3><p>快排的改进主要有三种方法：小数组使用插入排序、双枢轴（快速三向切分）、划分策略优化（五取样划分）。经</p><p>过优化后的快速排序算法时间复杂度可以介于 O(n)到 O(nlogn) 之间，性能更优。具体实现可以看 </p><p><code>DualPivotQuicksort</code>源码，实现的很复杂.</p><p><a href="https://mohuandao.github.io/2019/07/17/DualPivotQuicksort源码/" target="_blank" rel="noopener">点次看源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;排序-一&quot;&gt;&lt;a href=&quot;#排序-一&quot; class=&quot;headerlink&quot; title=&quot;排序(一)&quot;&gt;&lt;/a&gt;排序(一)&lt;/h1&gt;&lt;h3 id=&quot;冒泡排序和选择排序&quot;&gt;&lt;a href=&quot;#冒泡排序和选择排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序和选择排序&quot;&gt;&lt;/a&gt;冒泡排序和选择排序&lt;/h3&gt;&lt;p&gt;最开始接触的排序就是冒泡排序和选择排序,这两种排序都是经过一轮把最小的放在前面.这两种排序的时间复杂度均为O(n^2)&lt;/p&gt;
&lt;p&gt;不同的是:&lt;/p&gt;
&lt;p&gt;​    冒泡排序是在相邻的元素之间进行,将最小的移到了最前面.&lt;/p&gt;
&lt;p&gt;​    选择排序是前面的一个数和后面的整体比较,将最小的放前面.&lt;/p&gt;
&lt;p&gt;冒泡:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; arr.length;i++)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//外部循环次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = arr.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ;j--)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//从后面开始比较&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[j] &amp;lt; arr[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp = arr[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//交换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   arr[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = arr[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   arr[j] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;选择:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;selectSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [] arr)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || arr.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; arr.length; i++)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//外部循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j &amp;lt;arr.length ;j++)&amp;#123;&lt;span class=&quot;comment&quot;&gt;//第一个和剩下的比较&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr[i] &amp;gt; arr[j])&amp;#123;&lt;span class=&quot;comment&quot;&gt;//交换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp = arr[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    arr[j] = arr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    arr[i] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法部分" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%83%A8%E5%88%86/"/>
    
    
  </entry>
  
  <entry>
    <title>有时间看看算法</title>
    <link href="http://yoursite.com/2019/07/10/%E6%9C%89%E6%97%B6%E9%97%B4%E7%9C%8B%E7%9C%8B%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/10/有时间看看算法/</id>
    <published>2019-07-10T14:07:35.000Z</published>
    <updated>2019-07-12T09:28:44.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>传进去的参数为有序的数组<code>a</code>,要查找的值<code>key</code>,返回的是该值在数组中的索引.在进行二分查找前要对数组进行排序.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> hi = a.length - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">           <span class="comment">// Key is in a[lo..hi] or not present.</span></span><br><span class="line">           <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span>      (key &lt; a[mid]) hi = mid - <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; a[mid]) lo = mid + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="洗牌算法"><a href="#洗牌算法" class="headerlink" title="洗牌算法"></a>洗牌算法</h3><p>这个实现的比较简单,用到了java中<code>Math.random()</code>生成[0,1]随机数,遍历数组进行值的交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// choose index uniformly in [0, i]</span></span><br><span class="line">            <span class="keyword">int</span> r = (<span class="keyword">int</span>) (Math.random() * (i + <span class="number">1</span>));</span><br><span class="line">            Object swap = a[r];</span><br><span class="line">            a[r] = a[i];</span><br><span class="line">            a[i] = swap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>查看源码看到里面的方法是加了<code>synchronized</code>关键字的,HashTable是同步的，HashMap不是，也就是说HashTable在多线程使用的情况下，不需要做额外的同步</p><p>看到结构如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Entry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key =  key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value,</span><br><span class="line">                                  (next==<span class="keyword">null</span> ? <span class="keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Map.Entry Ops</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line"></span><br><span class="line">            V oldValue = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (key==<span class="keyword">null</span> ? e.getKey()==<span class="keyword">null</span> : key.equals(e.getKey())) &amp;&amp;</span><br><span class="line">               (value==<span class="keyword">null</span> ? e.getValue()==<span class="keyword">null</span> : value.equals(e.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hash ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key.toString()+<span class="string">"="</span>+value.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果你不需要线程安全，那么使用HashMap，如果需要线程安全，那么使用ConcurrentHashMap。HashTable已经被淘汰了，不要在新的代码中再使用它。</p><h4 id="hashmap"><a href="#hashmap" class="headerlink" title="hashmap"></a>hashmap</h4><p>其结构为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到内部结构是基本相同的.在结构里面都含有<code>Node&lt;K,V&gt; next</code>,为链表结构 都创建了一个继承自Map.Entry的私有的内部类Entry，每一个Entry对象表示存储在哈希表中的一个键值对</p><p>看到这样的结构可以在需要的时候构建.</p><h4 id="treemap"><a href="#treemap" class="headerlink" title="treemap"></a>treemap</h4><p>其结构为树形:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; left;</span><br><span class="line">        Entry&lt;K,V&gt; right;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="keyword">boolean</span> color = BLACK;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Make a new cell with given key, value, and parent, and with</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@code</span> null&#125; child links, and BLACK color.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the key.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the value associated with the key.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the value associated with the key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Replaces the value currently associated with the key with the given</span></span><br><span class="line"><span class="comment">         * value.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the value associated with the key before this method was</span></span><br><span class="line"><span class="comment">         *         called</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            V oldValue = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> valEquals(key,e.getKey()) &amp;&amp; valEquals(value,e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> keyHash = (key==<span class="keyword">null</span> ? <span class="number">0</span> : key.hashCode());</span><br><span class="line">            <span class="keyword">int</span> valueHash = (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">            <span class="keyword">return</span> keyHash ^ valueHash;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">"="</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>里面含有左,右和父</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; title=&quot;基础部分&quot;&gt;&lt;/a&gt;基础部分&lt;/h1&gt;&lt;h3 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h3&gt;&lt;p&gt;传进去的参数为有序的数组&lt;code&gt;a&lt;/code&gt;,要查找的值&lt;code&gt;key&lt;/code&gt;,返回的是该值在数组中的索引.在进行二分查找前要对数组进行排序.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lo = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hi = a.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (lo &amp;lt;= hi) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;// Key is in a[lo..hi] or not present.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = lo + (hi - lo) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;      (key &amp;lt; a[mid]) hi = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key &amp;gt; a[mid]) lo = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法部分" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%83%A8%E5%88%86/"/>
    
    
  </entry>
  
  <entry>
    <title>学习记录</title>
    <link href="http://yoursite.com/2019/07/10/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/07/10/学习记录/</id>
    <published>2019-07-10T08:15:27.000Z</published>
    <updated>2019-07-18T05:37:05.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="巧用-MyBatis-构建树形结构"><a href="#巧用-MyBatis-构建树形结构" class="headerlink" title="巧用 MyBatis 构建树形结构"></a>巧用 MyBatis 构建树形结构</h2><p>之前自己查询菜单表的时候,是全部查出来做递归处理来构建树形结构</p><p>看了别人的博客,可以通过mybatis在查询时就转换,用到了 MyBatis 的 <code>resultMap</code> 功能</p><p>先列出别人的实现</p><p>实体类的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer menuId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String menuName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resultMap定义:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultTreeMap"</span> <span class="attr">type</span>=<span class="string">"im.zhaojun.model.Menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"menu_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"menuId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"parent_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"parentId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"menu_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"menuName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"url"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"url"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"children"</span> <span class="attr">ofType</span>=<span class="string">"Menu"</span> <span class="attr">select</span>=<span class="string">"selectTree"</span> <span class="attr">column</span>=<span class="string">"&#123;parent_id = menu_id&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>查询定义:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectTree"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultTreeMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from menu</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"parent_id!=null"</span>&gt;</span></span><br><span class="line">                and parent_id = #&#123;parent_id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and parent_id = 0</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查询出的结果集:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"menuId"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"menuName"</span>: <span class="string">"权限管理"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"#"</span>,</span><br><span class="line">        <span class="attr">"children"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"用户管理"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/user/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"角色管理"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/role/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"菜单权限"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/menu/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">27</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"操作权限"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/operator/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">28</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"部门管理"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/dept/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"menuId"</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"menuName"</span>: <span class="string">"系统监控"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"#"</span>,</span><br><span class="line">        <span class="attr">"children"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">12</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"登录日志"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/log/login/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">19</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"操作日志"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/log/sys/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"在线用户"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/online/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"menuId"</span>: <span class="number">29</span>,</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">"menuName"</span>: <span class="string">"系统管理"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"/system/index"</span>,</span><br><span class="line">                <span class="attr">"children"</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"menuId"</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"menuName"</span>: <span class="string">"账号关联"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"/oauth2/index"</span>,</span><br><span class="line">        <span class="attr">"children"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>主要是collection中resultMap的定义:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"children"</span> <span class="attr">ofType</span>=<span class="string">"Menu"</span> <span class="attr">select</span>=<span class="string">"selectTree"</span> <span class="attr">column</span>=<span class="string">"&#123;parent_id = menu_id&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>property=&quot;children&quot;</code> 对应的是实体类中的 children 字段.</li><li><code>ofType=&quot;Menu&quot;</code> 对应 children 中泛型的的类型.</li><li><code>select=&quot;selectTree&quot;</code> 指定了 SELECT 语句的 id.</li><li><code>column=&quot;{parent_id = menu_id}&quot;</code> 参数的表达式, 向子语句中传递参数.</li></ul><p>有时间的话可以按照上面实现下,之前我的菜单是直接用的hashmap,要对结果进行封装.</p><p>用resultMap直接帮你完成封装,代码更加直观灵活.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学习记录&quot;&gt;&lt;a href=&quot;#学习记录&quot; class=&quot;headerlink&quot; title=&quot;学习记录&quot;&gt;&lt;/a&gt;学习记录&lt;/h1&gt;&lt;h2 id=&quot;巧用-MyBatis-构建树形结构&quot;&gt;&lt;a href=&quot;#巧用-MyBatis-构建树形结构&quot; class=&quot;headerlink&quot; title=&quot;巧用 MyBatis 构建树形结构&quot;&gt;&lt;/a&gt;巧用 MyBatis 构建树形结构&lt;/h2&gt;&lt;p&gt;之前自己查询菜单表的时候,是全部查出来做递归处理来构建树形结构&lt;/p&gt;
&lt;p&gt;看了别人的博客,可以通过mybatis在查询时就转换,用到了 MyBatis 的 &lt;code&gt;resultMap&lt;/code&gt; 功能&lt;/p&gt;
&lt;p&gt;先列出别人的实现&lt;/p&gt;
&lt;p&gt;实体类的定义:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Menu&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer menuId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer parentId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String menuName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;Menu&amp;gt; children;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;resultMap定义:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;resultMap&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;BaseResultTreeMap&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;im.zhaojun.model.Menu&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;menu_id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;jdbcType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;INTEGER&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;menuId&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent_id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;jdbcType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;INTEGER&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parentId&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;menu_name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;jdbcType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;VARCHAR&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;menuName&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;jdbcType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;VARCHAR&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;children&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ofType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Menu&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;select&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;selectTree&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;parent_id = menu_id&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
